# -*- coding: utf-8 -*-
"""
Created on Mon May 11 20:55:14 2020

@author: jingr
"""

import os, sys
sys.path.append('./libs')
sys.path.append('./tool/libs')
sys.path.append('../')

import matplotlib as mpl
defaultBackEnd = mpl.get_backend()
mpl.use('Agg')

import os, sys, re
sys.path.append(os.path.curdir)
sys.path.append(sys.argv[0])
import numpy as np
import analysisPlot

helpStr = '''
This script is to generate the plotting of the mutation from a sequence. 

Usage:
	python tool/mutationPlot.py --fileIn tmpOut/diffMat.txt --outSavePath tmpOut

Detailed options:
    --paddingRes            character
                            Default: 'X'
                            The padding charcter to fix the sequence.
                            
    --oriIndex              int
                            Default: 0
                            The origin seuqence in ‘--fileIn’
                            
    --windowSize            int
                            Default: 20
                            The length of the window in the output figure.
                            This parameter is provided to address that some sequence is too long to plot in a figure. 
                            
    --saveFig               bool
                            Default: True
                            To plot the figure.

    --saveText              bool
                            Default: True
                            To save the text output.

    --outSavePath           Path of string
                            Default: No default value
                            The folder to save the outputs (text and figures).
                            
    --showFig               bool
                            Default: True
                            To show the figure.

    --fileIn                Path of string
                            No default, should be provided by user
                            The file to record the outputs, usually the output is generated by another tool ‘findDiff.py’         
         
'''

if '-h' in sys.argv or '--help' in sys.argv:
    print(helpStr)
    exit()
paraDict = {
        'paddingRes' : 'X',
        'oriIndex' : 0,
        'windowSize' : 20,
        'saveFig' : True,
        'saveText' : True,
        'outSavePath' : None,
        'fileIn' : None,
        'showFig' : True,
        }



currPara = None
for para in sys.argv:
    if para.startswith('--'):
        currPara = para[2:]
    else:
        if currPara is None:
            continue
        paraDict[currPara] = para
        
#Name1 -- Name2\tIndex1 -- Index2\tPredction1 -- Prediction2\tprobDIff
#fileIn = '../tmpOut/diffMat.txt'
fileIn = paraDict['fileIn']
outSavePath = paraDict['outSavePath']
paddingRes = paraDict['paddingRes']

if not os.path.isdir(outSavePath):
    os.mkdir(outSavePath)

subSep = ' -- '

#oriIndex = 0
oriIndex = int(paraDict['oriIndex'])

proteinStr = 'GAVLIPFYWSTCMNQDEKRHXBJOUZ'
dnaStr = 'AGCT'
rnaStr = 'AGCU'
#windowSize = 20   
windowSize = int(paraDict['windowSize'])
     
#saveText = None
#saveFig = None
#outSavePath = ''
#showFig = True
try:
    saveText = bool(int(paraDict['saveText']))
except:
    saveText = eval(paraDict['saveText'])
try:
    saveFig = bool(int(paraDict['saveFig']))
except:
    saveFig = eval(paraDict['saveFig'])
try:
    showFig = bool(int(paraDict['showFig']))
except:
    showFig = eval(paraDict['showFig'])




if showFig:
    mpl.use(defaultBackEnd)

if fileIn is None:
    print('Please provide --fileIn')
    exit()

if outSavePath is None:
    if not saveFig is None or not saveText is None:
        print('No folder provided at --outSavePath, please provide one or set --saveFig and --saveText to False')


mutationDict = {} # position:ori:mutation
keySet = set()
with open(fileIn) as FID:     
    rowList = []
    rowOldInd = None
    for line in FID:
        if line.startswith('#'):
            continue
        eles = line.strip().split('\t')
        name1, name2 = eles[0].split(subSep)
        index1, index2 = eles[1].split(subSep)
        index1 = int(index1)
        index2 = int(index2)
        out1, out2 = eles[2].split(subSep)
        probDiff = float(eles[3])
        if index1 == oriIndex:
            position, oriRes, mutatedRes = re.findall('(\d+)_(\w)-(\w)',name2.split('###')[1])[0]
            position = int(position)
            if not position in mutationDict:
                mutationDict[position] = {}
            if not oriRes in mutationDict[position]:
                mutationDict[position][oriRes] = {}
            mutationDict[position][oriRes][mutatedRes] = probDiff
            keySet.add(oriRes.upper())
            keySet.add(mutatedRes.upper())

if paddingRes in keySet:
    keySet.remove(paddingRes)
if len(keySet) == 4:
    if 'U' in keySet:
        tempStr = rnaStr
    else:
        tempStr = dnaStr
else:
    tempStr = proteinStr

outMat = np.zeros([len(tempStr),len(list(mutationDict.keys()))])        
outStrDict = {'ori':'Seq:\t'}
for res in tempStr:
    outStrDict[res] = '%s:\t' %res
for position in np.sort(list(mutationDict.keys())):
    oriRes = list(mutationDict[position].keys())[0]
    outStrDict['ori'] += '%s\t' %oriRes
    for i,mutatedRes in enumerate(tempStr):
        if mutatedRes in mutationDict[position][oriRes]:
            outStrDict[mutatedRes] += '%.6e\t' %(mutationDict[position][oriRes][mutatedRes])
            outMat[i,position] = mutationDict[position][oriRes][mutatedRes]
        else:
            outStrDict[mutatedRes] += '0\t'
            outMat[i,position] = 0

#text output 
print(outStrDict['ori'])
for res in tempStr:
    print(outStrDict[res])

if saveText:
    tmpPath = '%s/mutationProbability.txt' %outSavePath
    print('Saving text output at %s' %tmpPath)
    with open(tmpPath, 'w') as FIDO:
        FIDO.write(outStrDict['ori'])
        FIDO.write('\n')
        for res in tempStr:
            FIDO.write(outStrDict[res])
            FIDO.write('\n')
        
#figure output
#analysisPlot.showMatWithVal(outMat)
minVal = np.min([-1*np.abs(outMat.min()), -1*np.abs(outMat.max())])
maxVal = np.max([np.abs(outMat.min()), np.abs(outMat.max())])   
xTickLabels = outStrDict['ori'].split('\t')[1:-1]
yTickLabels = list(tempStr)
currPos = 0
totalLen = outMat.shape[1]
save_count = 0
while currPos < totalLen:
    save_count += 1
    if saveFig:
        tmpSavePath = '%s/mutationPlot_%d' %(outSavePath, save_count)
        print('Saving figure at %s' %tmpSavePath)
    else:
        tmpSavePath = None
    currMat = np.zeros([len(tempStr),windowSize])
    currMat[:,:np.min([windowSize, totalLen - currPos])] += outMat[:,currPos:currPos+windowSize]
    analysisPlot.showMatWithVal(currMat,showText=False,vmin=None,
                                norm = mpl.colors.Normalize(vmin=minVal,vmax=maxVal),cmapName='bwr',
                            xtickLabels=xTickLabels[currPos:currPos+windowSize],
                            ytickLabels=yTickLabels,driverCaxSize=0.2,saveFig=tmpSavePath,
                            showFig=showFig)
    currPos += windowSize        
        
        
        
        
        
        
        
        
        